<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用for-of遍历对象</title>
    <url>/2022/02/09/Symbol-iterator/</url>
    <content><![CDATA[<p>如何遍历对象, 一般来说会想到 <code>for-in</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&quot;Kevin&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(k, obj[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// a Jane</span></span><br><span class="line"><span class="comment">// b Kevin</span></span><br></pre></td></tr></table></figure>

<p>但是<code>for-in</code>会遍历对象的原型链, 一些继承属性就被遍历出来了, 如果只想遍历对象自身的属性这时候就得加判断了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&quot;Jane&quot;</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="string">&quot;Kevin&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="built_in">Object</span>.create(obj);</span><br><span class="line">newObj.c = <span class="string">&quot;Duke&quot;</span>;</span><br><span class="line">newObj.e = <span class="string">&quot;James&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> newObj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(k, newObj[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">//  c Duke</span></span><br><span class="line"><span class="comment">//  e James</span></span><br><span class="line"><span class="comment">//  a Jane</span></span><br><span class="line"><span class="comment">//  b Kevin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">in</span> newObj)</span><br><span class="line">  <span class="keyword">if</span> (newObj.hasOwnProperty(k)) &#123;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(k, newObj[k]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// c Duke</span></span><br><span class="line"><span class="comment">// e James</span></span><br></pre></td></tr></table></figure>

<p>接下来我们尝试一些其他的方式</p>
<p>在 <code>ES6</code>中提供了其他 <code>for-of</code>, 可以很方便的遍历 <code>Array</code>、<code>Map</code>、<code>Set</code>、<code>String</code>、某些类数组如<code>arguments</code>等数据类型, 但是却无法遍历普通的<code>object</code>对象.</p>
<p>查阅资料后得知, 原来可以被 <code>for-of</code> 遍历的数据类型提供了 <code>iterator</code> 接口. 那如果我们在对象上自己实现一个 <code>iterator</code> 接口, 结果会如何呢?</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">newObj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(self);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &lt; keys.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">value</span>: &#123; <span class="attr">key</span>: keys[index], <span class="attr">value</span>: self[keys[index++]] &#125;,</span><br><span class="line">          <span class="attr">done</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">value</span>: <span class="literal">undefined</span>,</span><br><span class="line">          <span class="attr">done</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> &#123; key, value &#125; <span class="keyword">of</span> newObj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// c Duke</span></span><br><span class="line"><span class="comment">// e James</span></span><br></pre></td></tr></table></figure>

<p>现在我们通过实现了 <code>iterator</code> 接口, 使得对象可以被 <code>for-of</code> 遍历, 那么背后的原理是什么呢? 其实, <code>Symbol.iterator</code> 函数返回了一个 <code>next</code> 函数, 每次迭代都会调用 <code>next</code> 函数, 通过返回值中的 <code>value</code> 属性拿到遍历的结果,  <code>done</code> 属性来判断是否需要继续遍历.</p>
<p>接下来我们通过手动调用来验证一下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = newObj[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="keyword">let</span> result = iterator.next();</span><br><span class="line"><span class="keyword">while</span> (!result.done) &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; key, value &#125; = result.value;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value);</span><br><span class="line">  result = iterator.next();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line"><span class="comment">// c Duke</span></span><br><span class="line"><span class="comment">// e James</span></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
</search>
